// <auto-generated />
using System;
using MaterialsEvaluation.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MaterialsEvaluation.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230117040326_AddMaterialBatch")]
    partial class AddMaterialBatch
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MaterialsEvaluation.Database.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("MaterialsEvaluation.Database.MaterialBatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountOfTests")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CalculatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QualityVisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("QualityVisionId");

                    b.ToTable("MaterialBatches");
                });

            modelBuilder.Entity("MaterialsEvaluation.Database.MaterialBatchTests", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MaterialBatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QualityPropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ResultQualitative")
                        .HasColumnType("bit");

                    b.Property<double?>("ResultQuantitative")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MaterialBatchId");

                    b.HasIndex("QualityPropertyId");

                    b.ToTable("MaterialBatchTests");
                });

            modelBuilder.Entity("MaterialsEvaluation.Database.QualityProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuantitativeDecimals")
                        .HasColumnType("int");

                    b.Property<double?>("QuantitativeInferiorLimit")
                        .HasColumnType("float");

                    b.Property<double?>("QuantitativeNominalValue")
                        .HasColumnType("float");

                    b.Property<double?>("QuantitativeSuperiorLimit")
                        .HasColumnType("float");

                    b.Property<string>("QuantitativeUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QualityProperties");
                });

            modelBuilder.Entity("MaterialsEvaluation.Database.QualityVision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvaliationCalculationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvaliationGrouping")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AvaliationMinQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("QualityVisions");
                });

            modelBuilder.Entity("MaterialsEvaluation.Database.QualityVisionProperties", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QualityPropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QualityVisionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QualityPropertyId");

                    b.HasIndex("QualityVisionId", "QualityPropertyId")
                        .IsUnique();

                    b.ToTable("QualityVisionProperties");
                });

            modelBuilder.Entity("MaterialsEvaluation.Database.MaterialBatch", b =>
                {
                    b.HasOne("MaterialsEvaluation.Database.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaterialsEvaluation.Database.QualityVision", "QualityVision")
                        .WithMany("MaterialBatches")
                        .HasForeignKey("QualityVisionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("QualityVision");
                });

            modelBuilder.Entity("MaterialsEvaluation.Database.MaterialBatchTests", b =>
                {
                    b.HasOne("MaterialsEvaluation.Database.MaterialBatch", "MaterialBatch")
                        .WithMany("MaterialBatchTests")
                        .HasForeignKey("MaterialBatchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaterialsEvaluation.Database.QualityProperty", "QualityProperty")
                        .WithMany("MaterialBatchTests")
                        .HasForeignKey("QualityPropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MaterialBatch");

                    b.Navigation("QualityProperty");
                });

            modelBuilder.Entity("MaterialsEvaluation.Database.QualityVision", b =>
                {
                    b.HasOne("MaterialsEvaluation.Database.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("MaterialsEvaluation.Database.QualityVisionProperties", b =>
                {
                    b.HasOne("MaterialsEvaluation.Database.QualityProperty", "QualityProperty")
                        .WithMany()
                        .HasForeignKey("QualityPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaterialsEvaluation.Database.QualityVision", "QualityVision")
                        .WithMany("QualityVisionProperties")
                        .HasForeignKey("QualityVisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QualityProperty");

                    b.Navigation("QualityVision");
                });

            modelBuilder.Entity("MaterialsEvaluation.Database.MaterialBatch", b =>
                {
                    b.Navigation("MaterialBatchTests");
                });

            modelBuilder.Entity("MaterialsEvaluation.Database.QualityProperty", b =>
                {
                    b.Navigation("MaterialBatchTests");
                });

            modelBuilder.Entity("MaterialsEvaluation.Database.QualityVision", b =>
                {
                    b.Navigation("MaterialBatches");

                    b.Navigation("QualityVisionProperties");
                });
#pragma warning restore 612, 618
        }
    }
}
